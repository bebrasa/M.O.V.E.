#include <TimerOne.h>  // Подключаем библиотеку TimerOne для использования функций Таймера1

int val = 0;                   // Переменная для хранения оцифрованного значения сигнала
float highPassFiltered = 0;    // Переменная для хранения значения после высокочастотного фильтра
float bandPassFiltered = 0;    // Переменная для значения после полосового фильтра
float alphaHP = 0.95;          // Коэффициент для высокочастотного фильтра (чем ближе к 1, тем слабее фильтрация)
float alphaLP = 0.1;           // Коэффициент для низкочастотного фильтра (чем меньше значение, тем сильнее фильтрация)

float prevVal = 0;             // Предыдущее значение для высокочастотного фильтра

// Функция sendData вызывается каждый раз, когда срабатывает прерывание Таймера1
void sendData() {
  val = analogRead(A0);  // Считываем необработанное значение с A0

  // Применяем высокочастотный фильтр
  highPassFiltered = alphaHP * (highPassFiltered + val - prevVal);
  prevVal = val;  // Сохраняем текущее значение для использования в следующем цикле

  // Применяем низкочастотный фильтр к результату высокочастотного фильтра
  bandPassFiltered = alphaLP * highPassFiltered + (1 - alphaLP) * bandPassFiltered;

  // Нормируем отфильтрованное значение в диапазоне 0-255 и отправляем его в Serial для визуализации
  Serial.println(map(bandPassFiltered, 0, 1023, 0, 255));
}

// Функция setup вызывается один раз при запуске Arduino
void setup() {
  Serial.begin(115200);                 // Инициализируем Serial-порт на скорости 115200 Кбит/с
  Timer1.initialize(30000);              // Инициализируем Таймер1 с интервалом 3000 микросекунд (3 мс)
  Timer1.attachInterrupt(sendData);     // Привязываем функцию sendData к прерыванию таймера
}

void loop() {
  // Пустой цикл, так как Таймер1 вызывает функцию sendData каждые 3000 микросекунд
}